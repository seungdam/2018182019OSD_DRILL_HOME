시간
-프레임 시간 , 프레임 속도 , 프레임 시간을 활용한 객체 운동의 동기화

시간 개념이 없는 코드의 문제점

- 코드를 돌릴때 컴퓨터의 성능에 따라 속도가 달라진다.
  성능좋은 pc에서는 빠르게 성능나쁜 pc에서는 느리게

터보 버튼?
- cpu의 스피드를 버튼으로 자동으로 바꿔주는 것

예전의 게임 -> 픽셀단위로 움직임
즉 초창기 cpu 종속적 게임은 ...

-시간개념 X
-픽셀값의 변화로 표시

이를 해결하기위한 방안?

프레임(스크린샷)

-게임 랜더링의 결과물

프레임 시간 time delta/ delta time
-한장의 프레임을 만들어내는데 걸리는 시간
-Logic이 시작되는 시점 ~ 랜더링이 끝나기 전까지의 시간

 프레임 속도
-얼마나 빠른 프레임을 만들 수 있는지에 대한 척도
-fps라는 단위를 사용
- 최소 30fps 이상이여야 화면이 깜박거림이 없음

프레임 시간과 속도의 관계
-frame per sec = 1 / frame time (역수관계)

프레임속도와 프레임 시간이 균일하지 않다??

Why??

일단 코드를 분석해보면

시간측정 모듈 time  import
time.time() = 현재 시간을 가져온다
게임로직 실행전 현재 시각을 저장
게임 로직 (handle event , update draw)을 시행하면 하나의 프레임이 완성

게임로직이 한번 완료되기 까지의 시간길이를 구한다 -> 프레임시간
프레임 속도 = 프레임 시간의 역수

- 컴퓨터마다 성능이 다르기 때문에 프레임 타임은  달라질 수 밖에 없음
- 같은 컴퓨터로 돌림에도 계속 프레임 시간과 속도가 달라지는 이유?
=> pc는 기본적으로 window os를 사용하는데 실행중인 파이썬 프로그램 외에도 다양한 일을 수행 중이기 때문에
    cpu의 모든 자원을 파이썬 프로그램을 다루는데 사용할 수 없다. 동일한 씬이라도 복잡도에 따라 프레임이 달라지고
    os 에 따라서도 달라질 수 있음.

이는 게임 밸런싱의 큰 문제를 야기시킬 수 있음

해결방안?

1. 싱크를 그래픽 라이브러리에서 설정하도록 고정
 open cavas (w,h,true) -> 60fps 로 고정

But 프레임 시간이 가변적인게 문제
     빠른pc의 프레임을 느리게 강제적으로 만드는 것이기 때문에
     근본적으로 느린 pc에서는 의미가없다.

2. 객체들의 운동에 있어 시간을 도입한다!
   거리계산 공식을 이용

움직이는 객체의 이동에 있어서 단지 루프안에서 값을 변화시키는 것이 아닌 움직이는 것에 대한 속드를
계산하고 그 속도와 프레임타임을 곱함으로서 최종 이동을 구한 것이다.

게임내 객체가 어떤 속성이 바뀐다고하면 모든 비슷한 맥락에서 처리를 해줘야한다.



